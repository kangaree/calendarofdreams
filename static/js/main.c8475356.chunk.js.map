{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["mlbStats","MLBStatsAPI","localizer","momentLocalizer","moment","Event","event","style","textAlign","display","justifyContent","alignItems","data","teams","away","score","width","height","backgroundImage","title","split","backgroundSize","backgroundRepeat","backgroundPosition","home","App","props","state","events","unfilteredEvents","team","handleChange","setState","target","value","filter","baseballEvent","includes","render","className","onChange","Object","keys","teamnames","map","name","defaultDate","Date","components","length","min","formats","eventTimeRangeFormat","start","format","agendaTimeRangeFormat","popup","onSelectEvent","console","log","bind","year","getFullYear","getSchedule","params","sportId","startDate","endDate","response","dates","games","reduce","acc","curr","schedule","game","startMoment","gameDate","endMoment","add","toDate","end","desc","venue","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c8475356.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\n\nimport \"./App.css\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport \"./rbc.css\";\n\nimport MLBStatsAPI from \"mlb-stats-api\";\n\nimport teamnames from \"./teamnames.json\"\n\nconst mlbStats = new MLBStatsAPI();\n\nconst localizer = momentLocalizer(moment);\n\nfunction Event({ event }) {\n  return (\n    <span style={{ textAlign: \"center\" }}>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <span>{event.data.teams.away.score}</span>\n        <div\n          style={{\n            width: 40,\n            height: 20,\n            backgroundImage: `url(\"./logos/${\n              event.title.split(\" at \")[0]\n            }.png\")`,\n            backgroundSize: \"contain\",\n            backgroundRepeat: \"no-repeat\",\n            backgroundPosition: \"50% 50%\",\n          }}\n        />\n        <span>@</span>\n        <div\n          style={{\n            width: 40,\n            height: 20,\n            backgroundImage: `url(\"./logos/${\n              event.title.split(\" at \")[1]\n            }.png\")`,\n            backgroundSize: \"contain\",\n            backgroundRepeat: \"no-repeat\",\n            backgroundPosition: \"50% 50%\",\n          }}\n        />\n        <span>{event.data.teams.home.score}</span>\n      </div>\n    </span>\n  );\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  state = {\n    events: [],\n    unfilteredEvents: [],\n    team: \"MLB\",\n  };\n\n  async componentDidMount() {\n    const year = new Date().getFullYear()\n    \n    const response = await mlbStats.getSchedule({\n      params: {\n        sportId: 1,\n        // TODO: dynamically change every new year\n        startDate: `04/01/${year}`,\n        endDate: `12/31/${year}`,\n      },\n    });\n\n    const dates = response.data.dates;\n    const games = dates.reduce((acc, curr) => [...acc, ...curr.games], []);\n\n    const schedule = games.map((game) => {\n      const startMoment = moment(game.gameDate);\n      let endMoment = moment(game.gameDate).add(1, \"hours\");\n\n      return {\n        start: startMoment.toDate(),\n        end: endMoment.toDate(),\n        title:\n          teamnames[game.teams.away.team.name] +\n          \" at \" +\n          teamnames[game.teams.home.team.name],\n        desc: game.venue.name,\n        data: game,\n      };\n    });\n\n    this.setState({\n      events: schedule,\n      unfilteredEvents: schedule,\n    })\n  }\n\n  handleChange = (event) => {\n    this.setState({ team: event.target.value });\n\n    if (event.target.value === \"MLB\") {\n      this.setState({events: this.state.unfilteredEvents})\n    } else {\n      this.setState({\n        events: this.state.unfilteredEvents.filter((baseballEvent) =>\n          baseballEvent.title.includes(event.target.value)\n        ),\n      });\n    }\n\n  }\n\n  render = () => {\n    return (\n      <div className=\"App\">\n        <div style={{ height: \"5vh\" }}>\n          <select value={this.state.team} onChange={this.handleChange}>\n            <option value=\"MLB\">MLB</option>\n            {Object.keys(teamnames).map((name) => (\n              <option value={teamnames[name]}>{name}</option>\n            ))}\n          </select>\n        </div>\n        <Calendar\n          localizer={localizer}\n          defaultDate={new Date()}\n          events={this.state.events}\n          style={{ height: \"95vh\" }}\n          components={{\n            event: Event,\n          }}\n          // 60 day regular season sprint + 30\n          length={90}\n          // noon start\n          min={new Date(0, 0, 0, 12, 0, 0)}\n          // views={[\"month\", \"week\", \"agenda\"]}\n          // formats={{ eventTimeRangeFormat: \"spagett\" }}\n          formats={{\n            eventTimeRangeFormat: ({ start }) => moment(start).format(\"h:mm A\"),\n            agendaTimeRangeFormat: ({ start }) =>\n              moment(start).format(\"h:mm A\"),\n          }}\n          popup\n          onSelectEvent={() => console.log(\"an event has been selected\")}\n        />\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}