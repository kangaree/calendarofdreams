{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["mlbSchedule","map","game","startMoment","moment","endMoment","start","toDate","end","title","desc","localizer","momentLocalizer","Event","event","style","textAlign","display","justifyContent","alignItems","width","height","backgroundImage","split","backgroundSize","backgroundRepeat","backgroundPosition","fontSize","App","props","state","events","team","handleTeam","teamValue","console","log","setState","language","handleChange","target","value","filter","baseballEvent","includes","render","className","onChange","defaultDate","Date","defaultView","components","length","min","views","bind","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1c561e79.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\n\nimport \"./App.css\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport \"./rbc.css\";\n\nimport mlb from \"./mlb.json\";\n\nconst mlbSchedule = mlb\n  .map((game) => {\n    const startMoment = moment(game[\"START DATE\"] + \" \" + game[\"START TIME\"]);\n    const endMoment = moment(game[\"END DATE\"] + \" \" + game[\"END TIME\"]);\n\n    return {\n      start: startMoment.toDate(),\n      end: endMoment.toDate(),\n      title: game[\"SUBJECT\"],\n      desc: game[\"LOCATION\"],\n    };\n  });\n\nconst localizer = momentLocalizer(moment);\n\nfunction Event({ event }) {\n  return (\n    <span style={{ textAlign: \"center\" }}>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-around\",\n          alignItems: \"center\",\n        }}\n      >\n        <div\n          style={{\n            width: 40,\n            height: 40,\n            backgroundImage: `url(\"./logos/${\n              event.title.split(\" at \")[0]\n            }.png\")`,\n            backgroundSize: \"contain\",\n            backgroundRepeat: \"no-repeat\",\n            backgroundPosition: \"50% 50%\",\n          }}\n        />\n        <div\n          style={{\n            width: 40,\n            height: 40,\n            backgroundImage: `url(\"./logos/${\n              event.title.split(\" at \")[1]\n            }.png\")`,\n            backgroundSize: \"contain\",\n            backgroundRepeat: \"no-repeat\",\n            backgroundPosition: \"50% 50%\",\n          }}\n        />\n      </div>\n      <div>\n        <strong>\n          {event.title.split(\" at \")[0]} @ {event.title.split(\" at \")[1]}\n        </strong>\n      </div>\n      <div style={{fontSize: 12}}>{event.desc && event.desc}</div>\n    </span>\n  );\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  state = {\n    events: [],\n    team: \"Yankees\",\n  };\n\n  componentDidMount() {\n    this.setState({\n      events: mlbSchedule.filter((event) =>\n        event.title.includes(this.state.team)\n      ),\n    });\n  }\n\n  handleTeam = (teamValue) => {\n    console.log(\"new team\");\n    this.setState({ language: teamValue });\n  };\n\n  handleChange = (event) => {\n    this.setState({ team: event.target.value });\n    this.setState({\n      events: mlbSchedule.filter((baseballEvent) =>\n        baseballEvent.title.includes(event.target.value)\n      ),\n    });\n  }\n\n  render = () => {\n    return (\n      <div className=\"App\">\n        <div style={{ height: \"5vh\" }}>\n          <select value={this.state.team} onChange={this.handleChange}>\n            <option value=\"Yankees\">Yankees</option>\n            <option value=\"Orioles\">Orioles</option>\n            <option value=\"Red Sox\">Red Sox</option>\n            <option value=\"Rays\">Rays</option>\n            <option value=\"Blue Jays\">Blue Jays</option>\n            <option value=\"White Sox\">White Sox</option>\n            <option value=\"Indians\">Indians</option>\n            <option value=\"Tigers\">Tigers</option>\n            <option value=\"Royals\">Royals</option>\n            <option value=\"Twins\">Twins</option>\n            <option value=\"Astros\">Astros</option>\n            <option value=\"Angels\">Angels</option>\n            <option value=\"Athletics\">Athletics</option>\n            <option value=\"Mariners\">Mariners</option>\n            <option value=\"Rangers\">Rangers</option>\n            <option value=\"Braves\">Braves</option>\n            <option value=\"Marlins\">Marlins</option>\n            <option value=\"Mets\">Mets</option>\n            <option value=\"Phillies\">Phillies</option>\n            <option value=\"Nationals\">Nationals</option>\n            <option value=\"Cubs\">Cubs</option>\n            <option value=\"Reds\">Reds</option>\n            <option value=\"Brewers\">Brewers</option>\n            <option value=\"Pirates\">Pirates</option>\n            <option value=\"Cardinals\">Cardinals</option>\n            <option value=\"Diamondbacks\">Diamondbacks</option>\n            <option value=\"Rockies\">Rockies</option>\n            <option value=\"Dodgers\">Dodgers</option>\n            <option value=\"Padres\">Padres</option>\n            <option value=\"Giants\">Giants</option>\n          </select>\n        </div>\n        <Calendar\n          localizer={localizer}\n          defaultDate={new Date()}\n          defaultView=\"month\"\n          events={this.state.events}\n          style={{ height: \"95vh\" }}\n          components={{\n            event: Event,\n          }}\n          // 60 day regular season sprint + 30\n          length={90}\n          // noon start\n          min={new Date(0, 0, 0, 12, 0, 0)}\n          views={[\"month\", \"week\", \"agenda\"]}\n        />\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}